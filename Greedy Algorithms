1.
import java.util.*;
class PrimMST {
    static class Pair {
        int vertex, weight;
        Pair(int v, int w) {
            vertex = v;
            weight = w;
        }
    }
    public static void primsAlgo(int V, List<List<Pair>> adj) {
        boolean[] visited = new boolean[V];
        PriorityQueue<Pair> pq = new PriorityQueue<>(Comparator.comparingInt(a -> a.weight));
        pq.add(new Pair(0, 0));
        int totalWeight = 0;
        while (!pq.isEmpty()) {
            Pair curr = pq.poll();
            if (visited[curr.vertex]) continue;
            visited[curr.vertex] = true;
            totalWeight += curr.weight;
            for (Pair edge : adj.get(curr.vertex)) {
                if (!visited[edge.vertex]) {
                    pq.add(new Pair(edge.vertex, edge.weight));
                }
            }
        }
        System.out.println("Total weight of MST: " + totalWeight);
    }
    public static void main(String[] args) {
        int V = 5;
        List<List<Pair>> adj = new ArrayList<>();
        for (int i = 0; i < V; i++) adj.add(new ArrayList<>());
        adj.get(0).add(new Pair(1, 2));
        adj.get(1).add(new Pair(0, 2));
        adj.get(1).add(new Pair(2, 3));
        adj.get(2).add(new Pair(1, 3));
        adj.get(0).add(new Pair(3, 6));
        adj.get(3).add(new Pair(0, 6));
        adj.get(1).add(new Pair(3, 8));
        adj.get(3).add(new Pair(1, 8));
        adj.get(1).add(new Pair(4, 5));



        adj.get(4).add(new Pair(1, 5));
        primsAlgo(V, adj);
    }
}

2.
import java.util.*;
class KruskalMST {
    static class Edge implements Comparable<Edge> {
        int u, v, weight;
        Edge(int u, int v, int w) {
            this.u = u; this.v = v; this.weight = w;
        }
        public int compareTo(Edge e) {
            return this.weight - e.weight;
        }
    }
    static int find(int[] parent, int x) {
        if (parent[x] != x) parent[x] = find(parent, parent[x]);
        return parent[x];
    }
    static void union(int[] parent, int x, int y) {
        int parX = find(parent, x);
        int parY = find(parent, y);
        parent[parX] = parY;
    }
    public static void main(String[] args) {
        int V = 5;
        Edge[] edges = {
            new Edge(0, 1, 2),
            new Edge(1, 2, 3),
            new Edge(0, 3, 6),
            new Edge(1, 3, 8),
            new Edge(1, 4, 5)
        };
        Arrays.sort(edges);
        int[] parent = new int[V];
        for (int i = 0; i < V; i++) parent[i] = i;

        int totalWeight = 0;
        for (Edge e : edges) {
            if (find(parent, e.u) != find(parent, e.v)) {
                totalWeight += e.weight;
                union(parent, e.u, e.v);
            }



        }
        System.out.println("Total weight of MST: " + totalWeight);
    }
}

3.
import java.util.*;
class Dijkstra {
    static class Pair {
        int vertex, weight;
        Pair(int v, int w) {
            vertex = v; weight = w;
        }
    }
    public static void dijkstra(int V, List<List<Pair>> adj, int src) {
        int[] dist = new int[V];
        Arrays.fill(dist, Integer.MAX_VALUE);
        dist[src] = 0;
        PriorityQueue<Pair> pq = new PriorityQueue<>(Comparator.comparingInt(a -> a.weight));
        pq.add(new Pair(src, 0));
        while (!pq.isEmpty()) {
            Pair curr = pq.poll();
            for (Pair neighbor : adj.get(curr.vertex)) {
                if (dist[curr.vertex] + neighbor.weight < dist[neighbor.vertex]) {
                    dist[neighbor.vertex] = dist[curr.vertex] + neighbor.weight;
                    pq.add(new Pair(neighbor.vertex, dist[neighbor.vertex]));
                }
            }
        }
        System.out.println("Shortest distances from source " + src + ":");
        for (int i = 0; i < V; i++) {
            System.out.println("To " + i + " -> " + dist[i]);
        }
    }
    public static void main(String[] args) {
        int V = 5;
        List<List<Pair>> adj = new ArrayList<>();
        for (int i = 0; i < V; i++) adj.add(new ArrayList<>());
        adj.get(0).add(new Pair(1, 10));
        adj.get(0).add(new Pair(4, 5));
        adj.get(1).add(new Pair(2, 1));
        adj.get(1).add(new Pair(4, 2));
        adj.get(2).add(new Pair(3, 4));
        adj.get(3).add(new Pair(2, 6));




        adj.get(4).add(new Pair(1, 3));
        adj.get(4).add(new Pair(2, 9));
        adj.get(4).add(new Pair(3, 2));
        dijkstra(V, adj, 0);
    }
}

4.
import java.util.*;
class HuffmanNode {
    int data;
    char c;
    HuffmanNode left, right;
}
class MyComparator implements Comparator<HuffmanNode> {
    public int compare(HuffmanNode x, HuffmanNode y) {
        return x.data - y.data;
    }
}
public class HuffmanCoding {
    public static void printCode(HuffmanNode root, String s) {
        if (root.left == null && root.right == null && Character.isLetter(root.c)) {
            System.out.println(root.c + ": " + s);
            return;
        }
        printCode(root.left, s + "0");
        printCode(root.right, s + "1");
    }
    public static void main(String[] args) {
        int n = 6;
        char[] charArray = {'a', 'b', 'c', 'd', 'e', 'f'};
        int[] charFreq = {5, 9, 12, 13, 16, 45};
        PriorityQueue<HuffmanNode> q = new PriorityQueue<>(n, new MyComparator());
        for (int i = 0; i < n; i++) {
            HuffmanNode hn = new HuffmanNode();
            hn.c = charArray[i];
            hn.data = charFreq[i];
            hn.left = null;
            hn.right = null;
            q.add(hn);
        }
        HuffmanNode root = null;
        while (q.size() > 1) {
            HuffmanNode x = q.poll();
            HuffmanNode y = q.poll();
            HuffmanNode f = new HuffmanNode();
            f.data = x.data + y.data;
            f.c = '-';


            f.left = x;
            f.right = y;
            root = f;
            q.add(f);
        }
        System.out.println("Huffman Codes are:");
        printCode(root, "");
    }
}


