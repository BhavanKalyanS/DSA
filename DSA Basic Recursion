Understand recursion by print something N times ;

class Solution {

    public void printNos(int n) {
        
        if(n>0){
            printNos(n-1);
            System.out.print(n+" ");
        }
    }
}

Print name N times using recursion ;

class Solution {

    void printGfg(int N) {
        if(N<=0) return;
        printGfg(N-1);
        System.out.print("GFG"+" ");
    }
}

Print 1 to N using recursion ;

class Solution {

    public void printNos(int n) {
        
        if(n>0){
            printNos(n-1);
            System.out.print(n+" ");
        }
    }
}

Print N to 1 using recursion ;

class Solution {

    void printNos(int N) {
        if(N<=0) return;
        System.out.print(N+" ");
        printNos(N-1);
    }
}

Sum of first N numbers ;

class Solution {
    int sumOfSeries(int n) {
        if (n==0) {
            return 0;}
            
        return (n*n*n)+sumOfSeries(n-1);
    }
}

Factorial of N numbers ;

class Solution {
    static ArrayList<Long> factorialNumbers(long n) {
        ArrayList<Long> result = new ArrayList<>();
        
        long fact = 1;
        int k = 1;      
        
        while (fact <= n) {
            result.add(fact);
            k++;
            fact *= k;
        }
        
        return result;
    }
}

Reverse an array ;

class Solution {
    public void reverseArray(int arr[]) {
        int i = 0;
        int j = arr.length - 1;
        
        while (i < j) {
            int temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
            
            i++;
            j--;
        }
    }
}

	
Check if a string is palindrome or not ;

class Solution {
    public boolean isPalindrome(String s) {
        String cleanedString = s.replaceAll("[^a-zA-Z0-9]", "").toLowerCase();
            int left = 0, right = cleanedString.length() - 1;
        
        while (left < right) {
            if (cleanedString.charAt(left) != cleanedString.charAt(right)) {
                return false; 
            }
            left++;
            right--;
        }
        
        return true;
    }
}

Fibonacci Number ;

class Solution {
    public int fib(int n) {
        if(n<=1){
            return n;
        }
        return fib(n-1)+fib(n-2);
    }
}
