1.
import java.util.*;
public class CountingSort {
    public static void countingSort(int[] arr) {
        int max = Arrays.stream(arr).max().getAsInt();
        int[] count = new int[max + 1];
        for (int num : arr) count[num]++;
        int index = 0;
        for (int i = 0; i < count.length; i++) {
            while (count[i]-- > 0) arr[index++] = i;
        }
    }
    public static void main(String[] args) {
        int[] arr = {4, 2, 2, 10, 3, 3, 1};
        countingSort(arr);
        System.out.println(Arrays.toString(arr));
    }
}

2.
import java.util.*;
public class RadixSort {
    public static void radixSort(int[] arr) {
        int max = Arrays.stream(arr).max().getAsInt();
        for (int exp = 1; max / exp > 0; exp *= 10)
            countSortByDigit(arr, exp);
    }
    private static void countSortByDigit(int[] arr, int exp) {
        int[] output = new int[arr.length];
        int[] count = new int[10];
        for (int num : arr) count[(num / exp) % 10]++;
        for (int i = 1; i < 10; i++) count[i] += count[i - 1];
        for (int i = arr.length - 1; i >= 0; i--) {
            int digit = (arr[i] / exp) % 10;
            output[count[digit] - 1] = arr[i];
            count[digit]--;
        }
        System.arraycopy(output, 0, arr, 0, arr.length);
    }
    public static void main(String[] args) {
        int[] arr = {170, 45, 75, 90, 802, 4, 2, 66};
        radixSort(arr);
        System.out.println(Arrays.toString(arr));
    }
}

3.
import java.util.*;
public class LowerBound {
    public static int lowerBound(int[] arr, int key) {
        int left = 0, right = arr.length;
        while (left < right) {
            int mid = (left + right) / 2;
            if (arr[mid] < key)
                left = mid + 1;
            else
                right = mid;
        }
        return left;
    }
    public static void main(String[] args) {
        int[] arr = {1, 3, 3, 5, 6};
        int key = 3;
        System.out.println("Lower Bound of " + key + " is at index: " + lowerBound(arr, key));
    }
}

4.
public class LinearTimeSortCheck {
    public static boolean canUseCountingSort(int[] arr) {
        int min = Integer.MAX_VALUE, max = Integer.MIN_VALUE;
        for (int num : arr) {
            min = Math.min(min, num);
            max = Math.max(max, num);
        }
        return (max - min) <= arr.length; // Range is small enough
    }
    public static void main(String[] args) {
        int[] arr = {1, 3, 2, 5, 4};
        System.out.println("Can use Counting Sort: " + canUseCountingSort(arr));
    }
}    

5.
class TreeNode {
    int val;
    TreeNode left, right;
    TreeNode(int x) {
        val = x;
    }
}public class PreorderTraversal {
    public static void preorder(TreeNode root) {
        if (root == null) return;
        System.out.print(root.val + " ");
        preorder(root.left);
        preorder(root.right);
    }public static void main(String[] args) {
        TreeNode root = new TreeNode(1);
        root.left = new TreeNode(2);
        root.right = new TreeNode(3);
        root.left.left = new TreeNode(4);
        root.left.right = new TreeNode(5);
        System.out.print("Preorder Traversal: ");
        preorder(root);
    }
}


6.
class TreeNode {
    int val;
    TreeNode left, right;
    TreeNode(int x) {
        val = x;
    }
}
public class InorderTraversal {
    public static void inorder(TreeNode root) {
        if (root == null) return;
        inorder(root.left);
        System.out.print(root.val + " ");
        inorder(root.right);
    }
    public static void main(String[] args) {
        TreeNode root = new TreeNode(1);
        root.left = new TreeNode(2);
        root.right = new TreeNode(3);
        root.left.left = new TreeNode(4);
        root.left.right = new TreeNode(5);

        System.out.print("Inorder Traversal: ");
        inorder(root);
    }
}

7.
class TreeNode {
    int val;
    TreeNode left, right;
    TreeNode(int x) {
        val = x;
    }
}
public class PostorderTraversal {
    public static void postorder(TreeNode root) {
        if (root == null) return;
        postorder(root.left);
        postorder(root.right);
        System.out.print(root.val + " ");
    }
    public static void main(String[] args) {
        TreeNode root = new TreeNode(1);
        root.left = new TreeNode(2);
        root.right = new TreeNode(3);
        root.left.left = new TreeNode(4);
        root.left.right = new TreeNode(5);

        System.out.print("Postorder Traversal: ");
        postorder(root);
    }
}


8.
import java.util.PriorityQueue;
public class MinHeapExample {
    public static void main(String[] args) {
        PriorityQueue<Integer> minHeap = new PriorityQueue<>();
        minHeap.add(10);
        minHeap.add(5);
        minHeap.add(30);
        minHeap.add(2);
        System.out.println("Min Heap: " + minHeap);
        System.out.println("Extract Min: " + minHeap.poll()); // Removes 2
        System.out.println("After Extraction: " + minHeap);
    }
}  

9.
import java.util.Collections;
import java.util.PriorityQueue;
public class MaxHeapExample {
    public static void main(String[] args) {
        PriorityQueue<Integer> maxHeap = new PriorityQueue<>(Collections.reverseOrder());
        maxHeap.add(10);
        maxHeap.add(5);
        maxHeap.add(30);
        maxHeap.add(2);
        System.out.println("Max Heap: " + maxHeap);
        System.out.println("Extract Max: " + maxHeap.poll()); // Removes 30
        System.out.println("After Extraction: " + maxHeap);
    }
} 


